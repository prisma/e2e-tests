name: test

on:
  # Note about push & pull_request
  # when creating a new branch for a PR, push will be triggered immediately before the PR gets created
  # The GitHub API / GitHub context base commit is then 0000000000000000000000000000000000000000
  #
  # The get-changed-files action used in the detect_jobs_to_run needs to have a non 0 base commit to ba able to diff
  # Defining both push (and specify the branches) and pull_request solves the problem
  push:
    branches:
      # Push events our default branch
      - dev
      # Push events on our special branches
      - patch-dev
      - latest
      - integration
      # Push events to branches matching refs/heads/renovate/...
      - 'renovate/**'
  pull_request:
    paths-ignore:
      - '*.md'
      - 'renovate.json'

env:
  PRISMA_TELEMETRY_INFORMATION: 'e2e-tests test.yaml'
  CI: 1
  SLACK_WEBHOOK_URL_WORKFLOWS: ${{ secrets.SLACK_WEBHOOK_URL_WORKFLOWS }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  SLACK_WEBHOOK_URL_FAILING: ${{ secrets.SLACK_WEBHOOK_URL_FAILING }}
  DATABASE_URL_POSTGRES_TEMPLATE: ${{ secrets.DATABASE_URL_POSTGRES_TEMPLATE }}

defaults:
  run:
    # this makes windows use bash as well, which makes `...  >> $GITHUB_ENV` work there
    shell: bash

jobs:
  start-time:
    runs-on: ubuntu-latest
    outputs:
      start-time: ${{ steps.start-time-output.outputs.start-time }}
    steps:
      - id: start-time-output
        run: echo "::set-output name=start-time::$(date)"

  # # From https://github.com/marketplace/actions/skip-duplicate-actions
  # # This action cleans up previously running instances of a workflow on the same branch.
  # # This accomplishes the task of automatically cancelling CI runs on pushes to the same branch,
  # # which is a common feature in most CI systems but currently not possible with GitHub actions.
  # cleanup-runs:
  #   continue-on-error: true
  #   runs-on: ubuntu-latest
  # contains(github.actor, 'renovate')
  #   if: (!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/dev' && github.ref != 'refs/heads/integration' && github.ref != 'refs/heads/patch-dev' && github.ref != 'refs/heads/latest')
  #   steps:
  #     - uses: fkirc/skip-duplicate-actions@v3.4.1

  # Depending on the output we will run some or all tests as fallback
  detect_jobs_to_run:
    name: Detect jobs to run
    runs-on: ubuntu-latest
    outputs:
      jobs: ${{ steps.detect.outputs.jobs }}
    steps:
      - id: checkout
        uses: actions/checkout@v2
      - id: files
        uses: Ana06/get-changed-files@v2.1.0 # it's a fork of jitterbit/get-changed-files@v1 which works better with pull requests
        with:
          format: 'json'
      - name: Install Dependencies
        run: yarn install
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - id: detect
        run: ./.github/workflows/detect-jobs-to-run.js <<<'${{ steps.files.outputs.all }}'

  report-to-slack-success:
    runs-on: ubuntu-latest
    needs:
      - workers
      - core-features
      - migrate
      - os
      - node
      - binaries
      - packagers
      - frameworks
      - platforms
      - platforms-serverless
      - engines
      - bundlers
      - libraries
      - databases
      - databases-macos
      - process-managers
      - test-runners
      - docker
    if: success() && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/integration' || github.ref == 'refs/heads/patch-dev' || github.ref == 'refs/heads/latest')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - name: report success to slack
        run: bash .github/scripts/slack-workflow-status.sh ":white_check_mark:"

  report-to-slack-failure:
    runs-on: ubuntu-latest
    needs:
      - workers
      - core-features
      - migrate
      - os
      - node
      - binaries
      - packagers
      - frameworks
      - platforms
      - platforms-serverless
      - engines
      - bundlers
      - libraries
      - databases
      - databases-macos
      - process-managers
      - test-runners
      - docker
    if: failure() && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/integration' || github.ref == 'refs/heads/patch-dev' || github.ref == 'refs/heads/latest')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - name: report failure to slack
        run: bash .github/scripts/slack-workflow-status.sh ":x:"

  ####################################################
  ### real jobs after this

  process-managers:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['process-managers'] == true }}

    strategy:
      fail-fast: false
      matrix:
        feature: [pm2]
        clientEngine: [library] # ['library', 'binary']
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}

    steps:
      - uses: actions/checkout@v2

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: yarn install

      - uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Set test specific DATABASE_URL
        run: |
          string=${{ env.DATABASE_URL_POSTGRES_TEMPLATE }}
          search=database
          replace=${{ github.job }}_${{ matrix.feature }}_${{ matrix.os }}_${{ matrix.clientEngine }}
          replaced=${string/$search/$replace}
          echo "DATABASE_URL=$replaced" >> $GITHUB_ENV

      - name: test feature - ${{ matrix.feature }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.feature }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.feature }}

  docker:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['docker'] == true }}

    strategy:
      fail-fast: false
      matrix:
        feature: [alpine]
        clientEngine: [library, binary]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}

    steps:
      - uses: actions/checkout@v2

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: yarn install

      - uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Set test specific DATABASE_URL
        run: |
          string=${{ env.DATABASE_URL_POSTGRES_TEMPLATE }}
          search=database
          replace=${{ github.job }}_${{ matrix.feature }}_${{ matrix.os }}_${{ matrix.clientEngine }}
          replaced=${string/$search/$replace}
          echo "DATABASE_URL=$replaced" >> $GITHUB_ENV

      - name: test feature - ${{ matrix.feature }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.feature }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.feature }}

  core-features:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['core-features'] == true }}

    strategy:
      fail-fast: false
      matrix:
        feature:
          [
            auto-reconnect,
            browser-build,
            studio,
            generate-client-and-cli-install,
            generate-client-install,
            generate-client-install-on-sub-project,
          ]
        clientEngine: ['library', 'binary']
        os: [ubuntu-latest] #, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}

    steps:
      - uses: actions/checkout@v2

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: yarn install

      - uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Set test specific DATABASE_URL
        run: |
          string=${{ env.DATABASE_URL_POSTGRES_TEMPLATE }}
          search=database
          replace=${{ github.job }}_${{ matrix.feature }}_${{ matrix.os }}_${{ matrix.clientEngine }}
          replaced=${string/$search/$replace}
          echo "DATABASE_URL=$replaced" >> $GITHUB_ENV

      - name: test feature - ${{ matrix.feature }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.feature }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.feature }}

  migrate:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['migrate'] == true }}

    strategy:
      fail-fast: false
      matrix:
        feature: [db-seed-commonjs-pkg, db-seed-esm-pkg]
        clientEngine: ['library']
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}

    steps:
      - uses: actions/checkout@v2

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: yarn install

      - uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Set test specific DATABASE_URL
        run: |
          string=${{ env.DATABASE_URL_POSTGRES_TEMPLATE }}
          search=database
          replace=${{ github.job }}_${{ matrix.feature }}_${{ matrix.os }}_${{ matrix.clientEngine }}
          replaced=${string/$search/$replace}
          echo "DATABASE_URL=$replaced" >> $GITHUB_ENV

      - name: test feature - ${{ matrix.feature }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.feature }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.feature }}

  engines:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['engines'] == true }}

    strategy:
      fail-fast: false
      matrix:
        feature: [engine-types]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}

    steps:
      - uses: actions/checkout@v2

      - name: Install Dependencies
        run: yarn install

      - uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Set test specific DATABASE_URL
        run: |
          string=${{ env.DATABASE_URL_POSTGRES_TEMPLATE }}
          search=database
          replace=${{ github.job }}_${{ matrix.feature }}_${{ matrix.os }}
          replaced=${string/$search/$replace}
          echo "DATABASE_URL=$replaced" >> $GITHUB_ENV

      - name: test engines - ${{ matrix.feature }}
        run: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.feature }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.feature }}

  os:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['os'] == true }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        clientEngine: ['library', 'binary']
    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}

    steps:
      - uses: actions/checkout@v2

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: yarn install

      - uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Set test specific DATABASE_URL
        run: |
          string=${{ env.DATABASE_URL_POSTGRES_TEMPLATE }}
          search=database
          replace=${{ github.job }}_${{ matrix.os }}_${{ matrix.clientEngine }}
          replaced=${string/$search/$replace}
          echo "DATABASE_URL=$replaced" >> $GITHUB_ENV

      - name: test on ${{ matrix.os }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: bash .github/scripts/test-project.sh generic basic ${{ matrix.os }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh generic basic ${{ matrix.os }}

  node:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['node'] == true }}

    strategy:
      fail-fast: false
      matrix:
        node:
          - 12
          - 14
          - 15
          - 16
          - 12.6.0 # minimal node version via https://github.com/prisma/prisma/blob/master/src/packages/client/package.json and minimal minor version of node 12 via https://www.prisma.io/docs/reference/system-requirements
          - 14.0.0 # minimal minor version of node 14 via https://www.prisma.io/docs/reference/system-requirements
          - 17
        clientEngine: ['library', 'binary']
        os: [ubuntu-latest] #, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}

    steps:
      - uses: actions/checkout@v2

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: use node ${{ matrix.node }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - name: Set test specific DATABASE_URL
        run: |
          string=${{ env.DATABASE_URL_POSTGRES_TEMPLATE }}
          search=database
          replace=${{ github.job }}_${{ matrix.node }}_${{ matrix.os }}_${{ matrix.clientEngine }}
          replaced=${string/$search/$replace}
          echo "DATABASE_URL=$replaced" >> $GITHUB_ENV

      - name: test on node ${{ matrix.node }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: bash .github/scripts/test-project.sh generic basic "node ${{ matrix.node }}"

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh generic basic "node ${{ matrix.node }}"

  binaries:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['binaries'] == true }}

    strategy:
      fail-fast: false
      matrix:
        binary: [pkg]
        clientEngine: ['library', 'binary']
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}
      OS: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - uses: actions/setup-node@v2
        with:
          node-version: 12

      # no database used in existing binaries tests
      # - name: Set test specific DATABASE_URL
      #   run: |
      #     string=${{ env.DATABASE_URL_POSTGRES_TEMPLATE }}
      #     search=database
      #     replace=${{ github.job }}_${{ matrix.binary }}_${{ matrix.os }}_${{ matrix.clientEngine }}
      #     replaced=${string/$search/$replace}
      #     echo "DATABASE_URL=$replaced" >> $GITHUB_ENV

      - name: test ${{ matrix.binary }} binary on ${{ matrix.os }} using ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.binary }} ${{ matrix.os }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.binary }} ${{ matrix.os }}

  packagers:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['packagers'] == true }}

    strategy:
      fail-fast: false
      matrix:
        packager:
          - npm
          - npm-global
          - pnpm
          - pnpm-workspaces-custom-output
          - pnpm-workspaces-default-output
          - yarn
          - yarn-workspaces
          - yarn2-without-pnp
        clientEngine: [library] #['library', 'binary']
        os: [ubuntu-latest] #, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}

    steps:
      - uses: actions/checkout@v2

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: use node 12
        uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Set test specific DATABASE_URL
        run: |
          string=${{ env.DATABASE_URL_POSTGRES_TEMPLATE }}
          search=database
          replace=${{ github.job }}_${{ matrix.packager }}_${{ matrix.os }}_${{ matrix.clientEngine }}
          replaced=${string/$search/$replace}
          echo "DATABASE_URL=$replaced" >> $GITHUB_ENV

      - name: packager ${{ matrix.packager }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.packager }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.packager }}

  frameworks:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['frameworks'] == true }}

    strategy:
      fail-fast: false
      matrix:
        framework:
          - nestjs
          - nextjs
        clientEngine: [library] #['library', 'binary']
        os: [ubuntu-latest] #, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}

    steps:
      - uses: actions/checkout@v2

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: use node 12
        uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Set test specific DATABASE_URL
        run: |
          string=${{ env.DATABASE_URL_POSTGRES_TEMPLATE }}
          search=database
          replace=${{ github.job }}_${{ matrix.framework }}_${{ matrix.os }}_${{ matrix.clientEngine }}
          replaced=${string/$search/$replace}
          echo "DATABASE_URL=$replaced" >> $GITHUB_ENV

      - name: framework ${{ matrix.framework }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.framework }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.framework }}

  platforms:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['platforms'] == true }}

    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        platform:
          - heroku
          - aws-graviton
          - codesandbox
          - m1-macstadium
        clientEngine: ['library', 'binary']
        os: [ubuntu-latest] #, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    concurrency: ${{ github.run_id }}-platforms-${{ matrix.platform }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      SSH_KEY_GRAVITON: ${{ secrets.SSH_KEY_GRAVITON }}
      SSH_KEY_M1_MACSTADIUM: ${{ secrets.SSH_KEY_M1_MACSTADIUM }}

    steps:
      - uses: actions/checkout@v2

      - name: use node 12
        uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: yarn

      # Install Puppeteer for Codesandbox test only
      - name: Install Puppeteer
        if: ${{ matrix.platform == 'codesandbox' }}
        uses: ianwalter/puppeteer-container@v4.0.0
        with:
          args: yarn --ignore-engines

      - name: Set test specific DATABASE_URL
        run: |
          string=${{ env.DATABASE_URL_POSTGRES_TEMPLATE }}
          search=database
          replace=${{ github.job }}_${{ matrix.platform }}_${{ matrix.os }}_${{ matrix.clientEngine }}
          replaced=${string/$search/$replace}
          echo "DATABASE_URL=$replaced" >> $GITHUB_ENV

      - name: test ${{ matrix.platform }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 60
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.platform }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.platform }}

  platforms-serverless:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['platforms-serverless'] == true }}

    timeout-minutes: 60 # can take longer if platforms are down, so better protect
    strategy:
      fail-fast: false
      matrix:
        platform:
          - lambda
          - vercel-node-builder
          - vercel-cli
          - vercel-with-redwood
          - vercel-with-nextjs
          - netlify-cli
          - netlify-ci
          - gcp-functions
          - firebase-functions
          - azure-functions-linux
          - azure-functions-windows
          - serverless-framework-lambda
        clientEngine: ['library', 'binary']
        os: [ubuntu-latest] #, windows-latest, macos-latest]
        exclude:
          # Node-API w/ 32 bit Node by default, see https://github.com/prisma/prisma/issues/6905
          - clientEngine: library
            platform: azure-functions-windows
    runs-on: ${{ matrix.os }}
    concurrency: ${{ github.run_id }}-platforms-serverless-${{ matrix.platform }}
    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}
      NPM_CONFIG_LOGLEVEL: error
      NODE_ENV: development
      NODE_MODULES_CACHE: false
      NODE_VERBOSE: true
      SSH_KEY_NETLIFY: ${{ secrets.SSH_KEY_NETLIFY }}
      GCP_FUNCTIONS_PROJECT: ${{ secrets.GCP_FUNCTIONS_PROJECT }}
      GCP_FUNCTIONS_ACCOUNT: ${{ secrets.GCP_FUNCTIONS_ACCOUNT }}
      GCP_FUNCTIONS_SECRET: ${{ secrets.GCP_FUNCTIONS_SECRET }}
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ROLE: ${{ secrets.AWS_ROLE }}
      VERCEL_NODE_BUILDER_PROJECT_ID: ${{ secrets.VERCEL_NODE_BUILDER_PROJECT_ID }}
      VERCEL_NODE_BUILDER_ORG_ID: ${{ secrets.VERCEL_NODE_BUILDER_ORG_ID }}
      VERCEL_WITH_REDWOOD_PROJECT_ID: ${{ secrets.VERCEL_WITH_REDWOOD_PROJECT_ID }}
      VERCEL_WITH_REDWOOD_ORG_ID: ${{ secrets.VERCEL_WITH_REDWOOD_ORG_ID }}
      VERCEL_WITH_NEXTJS_PROJECT_ID: ${{ secrets.VERCEL_WITH_NEXTJS_PROJECT_ID }}
      VERCEL_WITH_NEXTJS_ORG_ID: ${{ secrets.VERCEL_WITH_NEXTJS_ORG_ID }}
      VERCEL_API_PROJECT_ID: ${{ secrets.VERCEL_API_PROJECT_ID }}
      VERCEL_API_ORG_ID: ${{ secrets.VERCEL_API_ORG_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      AZURE_SP_TENANT: ${{ secrets.AZURE_SP_TENANT }}
      AZURE_SP_PASSWORD: ${{ secrets.AZURE_SP_PASSWORD }}
      AZURE_SP_NAME: ${{ secrets.AZURE_SP_NAME }}
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - name: use node 14
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: yarn

      - name: Set test specific DATABASE_URL
        run: |
          string=${{ env.DATABASE_URL_POSTGRES_TEMPLATE }}
          search=database
          replace=${{ github.job }}_${{ matrix.platform }}_${{ matrix.os }}
          replaced=${string/$search/$replace}
          echo "DATABASE_URL=$replaced" >> $GITHUB_ENV

      - name: test ${{ matrix.platform }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 60
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.platform }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.platform }}

  workers:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['workers'] == true }}

    timeout-minutes: 60 # can take longer if platforms are down, so better protect
    strategy:
      fail-fast: false
      matrix:
        platform:
          - cloudflare-workers
          - vercel-edge-functions
        clientEngine: ['dataproxy'] # only valid value here
        os: [ubuntu-latest] #, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    concurrency: ${{ github.run_id }}-workers-${{ matrix.platform }}
    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}
      NPM_CONFIG_LOGLEVEL: error
      NODE_ENV: development
      NODE_MODULES_CACHE: false
      NODE_VERBOSE: true
      AES_256_PASS: ${{ secrets.AES_256_PASS }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - name: use node 14
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: yarn

      - name: test ${{ matrix.platform }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 60
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.platform }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.platform }}

  bundlers:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['bundlers'] == true }}

    strategy:
      fail-fast: false
      matrix:
        bundler:
          - webpack
          - parcel
          - rollup
        clientEngine: [library] #['library', 'binary']
        os: [ubuntu-latest] #, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}

    steps:
      - uses: actions/checkout@v2

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: use node 12
        uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Set test specific DATABASE_URL
        run: |
          string=${{ env.DATABASE_URL_POSTGRES_TEMPLATE }}
          search=database
          replace=${{ github.job }}_${{ matrix.bundler }}_${{ matrix.os }}
          replaced=${string/$search/$replace}
          echo "DATABASE_URL=$replaced" >> $GITHUB_ENV

      - name: test ${{ matrix.bundler }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.bundler }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.bundler }}

  libraries:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['libraries'] == true }}

    strategy:
      fail-fast: false
      matrix:
        library:
          - express
          - apollo-server
          - type-graphql
          - nexus-schema
        clientEngine: [library] #['library', 'binary']
        os: [ubuntu-latest] #, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}

    steps:
      - uses: actions/checkout@v2

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: use node 12
        uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Set test specific DATABASE_URL
        run: |
          string=${{ env.DATABASE_URL_POSTGRES_TEMPLATE }}
          search=database
          replace=${{ github.job }}_${{ matrix.library }}_${{ matrix.os }}_${{ matrix.clientEngine }}
          replaced=${string/$search/$replace}
          echo "DATABASE_URL=$replaced" >> $GITHUB_ENV

      - name: test ${{ matrix.library }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.library }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.library }}

  databases:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['databases'] == true }}

    strategy:
      fail-fast: false
      matrix:
        database:
          - digitalocean-pgbouncer
          - docker-pgbouncer
          - heroku-pgbouncer
          - heroku-pgbouncer-buildpack
          - sqlserver-aws-rds
          - sqlserver-azure-sql
          - gcp-postgresql-ssl
          - gcp-mysql-ssl
          - mongodb-atlas
          - mongodb-atlas-serverless
          - mongodb-digitalocean
          - supabase
          - supabase-pool
          - planetscale
          - cockroach-cloud
        clientEngine: ['library', 'binary']
        os: [ubuntu-latest] #, windows-latest, macos-latest]
        exclude:
          # excludes mongodb-digitalocean for library engine (to be added again later)
          - database: 'mongodb-digitalocean'
            clientEngine: 'library'

    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}}
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      DATABASE_DO_PG_BOUNCER_URL: ${{ secrets.DATABASE_DO_PG_BOUNCER_URL }}
      DATABASE_HEROKU_PGBOUNCER_URL: ${{ secrets.DATABASE_HEROKU_PGBOUNCER_URL }}
      DATABASE_URL_DB_SQL_SERVER_AWS_RDS: ${{ secrets.DATABASE_URL_DB_SQL_SERVER_AWS_RDS }}
      DATABASE_URL_DB_SQL_SERVER_AZURE_SQL: ${{ secrets.DATABASE_URL_DB_SQL_SERVER_AZURE_SQL }}
      DATABASE_URL_PLANETSCALE: ${{ secrets.DATABASE_URL_PLANETSCALE }}
      GCP_POSTGRESQL_SSL_CLIENT_CERT: ${{ secrets.GCP_POSTGRESQL_SSL_CLIENT_CERT }}
      GCP_POSTGRESQL_SSL_CLIENT_KEY: ${{ secrets.GCP_POSTGRESQL_SSL_CLIENT_KEY }}
      GCP_POSTGRESQL_SSL_DB_URL: ${{ secrets.GCP_POSTGRESQL_SSL_DB_URL }}
      GCP_POSTGRESQL_SSL_SERVER_CA: ${{ secrets.GCP_POSTGRESQL_SSL_SERVER_CA }}
      GCP_MYSQL_SSL_CLIENT_CERT: ${{ secrets.GCP_MYSQL_SSL_CLIENT_CERT }}
      GCP_MYSQL_SSL_CLIENT_KEY: ${{ secrets.GCP_MYSQL_SSL_CLIENT_KEY }}
      GCP_MYSQL_SSL_DB_URL: ${{ secrets.GCP_MYSQL_SSL_DB_URL }}
      GCP_MYSQL_SSL_SERVER_CA: ${{ secrets.GCP_MYSQL_SSL_SERVER_CA }}
      DATABASE_URL_DB_MONGODB_ATLAS: ${{ secrets.DATABASE_URL_DB_MONGODB_ATLAS }}
      DATABASE_URL_DB_MONGODB_ATLAS_SERVERLESS: ${{ secrets.DATABASE_URL_DB_MONGODB_ATLAS_SERVERLESS }}
      DATABASE_URL_DB_MONGODB_DIGITALOCEAN: ${{ secrets.DATABASE_URL_DB_MONGODB_DIGITALOCEAN }}
      MONGODB_DIGITALOCEAN_CERT: ${{ secrets.MONGODB_DIGITALOCEAN_CERT }}
      DATABASE_URL_SUPAPABASE_CONNECTION_POOL: ${{ secrets.DATABASE_URL_SUPAPABASE_CONNECTION_POOL }}
      DATABASE_URL_SUPAPABASE: ${{ secrets.DATABASE_URL_SUPAPABASE }}
      DATABASE_URL_COACKROACH_CLOUD: ${{ secrets.DATABASE_URL_COACKROACH_CLOUD }}

    steps:
      - uses: actions/checkout@v2

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: yarn install

      - name: use node 12
        uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: test ${{ matrix.database }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.database }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.database }}

  databases-macos:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['databases-macos'] == true }}

    strategy:
      fail-fast: false
      matrix:
        clientEngine: [library] # ['library', 'binary']
        database:
          - sqlserver-azure-sql
        os: [macos-latest]
    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}
      DATABASE_URL_DB_SQL_SERVER_AZURE_SQL: ${{ secrets.DATABASE_URL_DB_SQL_SERVER_AZURE_SQL }}

    steps:
      - uses: actions/checkout@v2

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: yarn install

      - name: use node 12
        uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: test ${{ matrix.database }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.database }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.database }}

  test-runners:
    needs: [start-time, detect_jobs_to_run]
    if: ${{ fromJson(needs.detect_jobs_to_run.outputs.jobs)['test-runners'] == true }}

    strategy:
      fail-fast: false
      matrix:
        test-runner:
          - jest-with-multiple-generators
        clientEngine: ['library', 'binary']
        os: [ubuntu-latest] #, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    env:
      START_TIME: ${{ needs.start-time.outputs.start-time }}

    steps:
      - uses: actions/checkout@v2

      - name: Define Client Engine Type to test
        run: echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.clientEngine }}" >> $GITHUB_ENV

      - name: use node 12
        uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Set test specific DATABASE_URL
        run: |
          string=${{ env.DATABASE_URL_POSTGRES_TEMPLATE }}
          search=database
          replace=${{ github.job }}_${{ matrix.test-runner }}_${{ matrix.os }}_${{ matrix.clientEngine }}
          replaced=${string/$search/$replace}
          echo "DATABASE_URL=$replaced" >> $GITHUB_ENV

      - name: test ${{ matrix.test-runner }} - ${{ matrix.clientEngine }}
        id: run-test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: bash .github/scripts/test-project.sh ${{ github.job }} ${{ matrix.test-runner }}

      - name: notify-slack
        if: failure()
        run: bash .github/slack/notify-failure.sh ${{ github.job }} ${{ matrix.test-runner }}
