name: test
on: push
jobs:
  os:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v1

      - uses: actions/setup-node@v1
        with:
          version: 12

      - name: test on ${{ matrix.platform }}
        run: sh run.sh os base
        env:
          OS_BASE_PG_URL: ${{ secrets.OS_BASE_PG_URL }}

  node:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node:
          - 10
          - 12

    name: node ${{ matrix.node }}
    steps:
      - uses: actions/checkout@v1

      - name: use node ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: test on node ${{ matrix.node }}
        run: sh run.sh os base
        env:
          OS_BASE_PG_URL: ${{ secrets.OS_BASE_PG_URL }}

  packagers:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        packager:
          - yarn
          - npm
          - yarn-workspaces

    steps:
      - uses: actions/checkout@v1

      - name: use node ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: packager ${{ matrix.packager }}
        run: sh run.sh packagers ${{ matrix.packager }}
        env:
          PACKAGERS_NPM_PG_URL: ${{ secrets.PACKAGERS_NPM_PG_URL }}
          PACKAGERS_YARN_PG_URL: ${{ secrets.PACKAGERS_YARN_PG_URL }}
          PACKAGERS_YARN_WORKSPACES_PG_URL: ${{ secrets.PACKAGERS_YARN_WORKSPACES_PG_URL }}

  frameworks:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        framework:
          - nestjs
          - nextjs
          - nexus

    steps:
      - uses: actions/checkout@v1

      - name: use node ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: framework ${{ matrix.framework }}
        run: sh run.sh frameworks ${{ matrix.framework }}
        env:
          FRAMEWORK_NEXTJS_PG_URL: ${{ secrets.FRAMEWORK_NEXTJS_PG_URL }}
          FRAMEWORK_NESTJS_PG_URL: ${{ secrets.FRAMEWORK_NESTJS_PG_URL }}
          FRAMEWORK_NEXUS_PG_URL: ${{ secrets.FRAMEWORK_NEXUS_PG_URL }}

  platforms:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform:
          - lambda
          - heroku
          - netlify
          - zeit-now
          - netlify-ci-build
          - netlify-zisi
          - gcp-functions
          - codesandbox
          - azure-functions-linux

    steps:
      - uses: actions/checkout@v1

      - name: use node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Install Puppeteer
        uses: ianwalter/puppeteer@v2.0.0
        with:
          args: yarn

      - name: test ${{ matrix.platform }}
        run: sh run.sh platforms ${{ matrix.platform }}
        env:
          CI: 1
          SSH_KEY_NETLIFY: ${{ secrets.SSH_KEY_NETLIFY }}
          SSH_KEY_NETLIFY_ZISHI: ${{ secrets.SSH_KEY_NETLIFY_ZISHI }}
          GCP_FUNCTIONS_PG_URL: ${{ secrets.GCP_FUNCTIONS_PG_URL }}
          GCP_FUNCTIONS_PROJECT: ${{ secrets.GCP_FUNCTIONS_PROJECT }}
          GCP_FUNCTIONS_ACCOUNT: ${{ secrets.GCP_FUNCTIONS_ACCOUNT }}
          GCP_FUNCTIONS_SECRET: ${{ secrets.GCP_FUNCTIONS_SECRET }}
          NETLIFY_PG_URL: ${{ secrets.NETLIFY_PG_URL }}
          LAMBDA_PG_URL: ${{ secrets.LAMBDA_PG_URL }}
          HEROKU_PG_URL: ${{ secrets.HEROKU_PG_URL }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          NPM_CONFIG_LOGLEVEL: error
          NODE_ENV: development
          NODE_MODULES_CACHE: false
          NODE_VERBOSE: true
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ROLE: ${{ secrets.AWS_ROLE }}
          ZEIT_NOW_PG_URL: ${{ secrets.ZEIT_NOW_PG_URL }}
          ZEIT_TOKEN: ${{ secrets.ZEIT_TOKEN }}
          NETLIFY_BETA_PG_URL: ${{ secrets.NETLIFY_BETA_PG_URL }}
          NETLIFY_BUILD_LIFECYCLE_TRIAL: ${{ secrets.NETLIFY_BUILD_LIFECYCLE_TRIAL }}
          AZURE_FUNCTIONS_LINUX_PG_URL: ${{ secrets.AZURE_FUNCTIONS_LINUX_PG_URL }}
          AZURE_SP_TENANT: ${{ secrets.AZURE_SP_TENANT }}
          AZURE_SP_PASSWORD: ${{ secrets.AZURE_SP_PASSWORD }}
          AZURE_SP_NAME: ${{ secrets.AZURE_SP_NAME }}

  bundlers:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        bundler:
          - webpack
          - parcel
          - rollup

    name: bundler ${{ matrix.bundler }}
    steps:
      - uses: actions/checkout@v1

      - name: use node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: test ${{ matrix.bundler }}
        run: sh run.sh bundlers ${{ matrix.bundler }}
        env:
          WEBPACK_PG_URL: ${{ secrets.WEBPACK_PG_URL }}
          PARCEL_PG_URL: ${{ secrets.PARCEL_PG_URL }}
          ROLLUP_PG_URL: ${{ secrets.ROLLUP_PG_URL }}

  libraries:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        library:
          - express

    name: library ${{ matrix.library }}
    steps:
      - uses: actions/checkout@v1

      - name: use node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: test ${{ matrix.library }}
        run: sh run.sh libraries ${{ matrix.library }}
        env:
          LIBRARY_EXPRESS_PG_URL: ${{ secrets.LIBRARY_EXPRESS_PG_URL }}
